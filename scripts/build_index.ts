#!/usr/bin/env tsx

/**
 * KnowledgeGas AI - Index Builder Script
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Å–±–æ—Ä–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ –∫–æ—Ä–ø—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¢–≠–ö:
 * - –ù–æ—Ä–º–∞—Ç–∏–≤—ã (–°–ü/–ì–û–°–¢) ‚â• 300 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * - –¢–µ—Ö. —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã ‚â• 200 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤  
 * - –ß–µ—Ä—Ç–µ–∂–∏ (DWG ‚Üí PDF-preview) ‚â• 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * - –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã/–æ—Ç—á—ë—Ç—ã ‚â• 150 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –¢–û–∏–† ‚â• 250 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * 
 * –§–æ—Ä–º–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: npm run build-index
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Elastic/Lucene
 */

import fs from 'fs/promises'
import path from 'path'
import { createHash } from 'crypto'

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
interface BuildConfig {
  inputDir: string
  outputDir: string
  elastic: {
    host: string
    index: string
    mappings: Record<string, any>
  }
  processing: {
    batchSize: number
    maxFileSize: number // MB
    ocr: {
      enabled: boolean
      languages: string[]
    }
  }
}

const CONFIG: BuildConfig = {
  inputDir: process.env.DOCS_INPUT_DIR || './data/documents',
  outputDir: process.env.INDEX_OUTPUT_DIR || './data/index',
  elastic: {
    host: process.env.ELASTIC_HOST || 'http://localhost:9200',
    index: 'knowledgegas-docs',
    mappings: {
      properties: {
        title: { type: 'text', analyzer: 'russian' },
        content: { type: 'text', analyzer: 'russian' },
        type: { type: 'keyword' },
        tags: { type: 'keyword' },
        version: { type: 'keyword' },
        status: { type: 'keyword' }, // –î–µ–π—Å—Ç–≤—É—é—â–∏–π, –£—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É
        updated: { type: 'date' },
        file_path: { type: 'keyword' },
        file_size: { type: 'integer' },
        checksum: { type: 'keyword' },
        embedding: { type: 'dense_vector', dims: 384 } // miniLM-v3
      }
    }
  },
  processing: {
    batchSize: 50,
    maxFileSize: 100, // MB
    ocr: {
      enabled: true,
      languages: ['rus', 'eng']
    }
  }
}

// === –¢–ò–ü–´ –î–û–ö–£–ú–ï–ù–¢–û–í ===
interface DocumentType {
  id: string
  name: string
  patterns: string[]
  expectedCount: number
  processor: string
}

const DOCUMENT_TYPES: DocumentType[] = [
  {
    id: 'standards',
    name: '–ù–æ—Ä–º–∞—Ç–∏–≤—ã (–°–ü/–ì–û–°–¢)',
    patterns: ['**/*–°–ü*.pdf', '**/*–ì–û–°–¢*.pdf', '**/SP*.pdf', '**/GOST*.pdf'],
    expectedCount: 300,
    processor: 'pdf_ocr'
  },
  {
    id: 'regulations',
    name: '–¢–µ—Ö. —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã',
    patterns: ['**/—Ä–µ–≥–ª–∞–º–µ–Ω—Ç*.pdf', '**/regulation*.pdf', '**/*–†–¢–ü*.pdf'],
    expectedCount: 200,
    processor: 'pdf_text'
  },
  {
    id: 'drawings',
    name: '–ß–µ—Ä—Ç–µ–∂–∏',
    patterns: ['**/*.dwg', '**/*.pdf'],
    expectedCount: 100,
    processor: 'dwg_to_pdf'
  },
  {
    id: 'incidents',
    name: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã/–æ—Ç—á—ë—Ç—ã',
    patterns: ['**/incident*.md', '**/report*.md', '**/–æ—Ç—á–µ—Ç*.md'],
    expectedCount: 150,
    processor: 'markdown'
  },
  {
    id: 'maintenance',
    name: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –¢–û–∏–†',
    patterns: ['**/maintenance*.pdf', '**/—Ç–æ*.pdf', '**/repair*.pdf'],
    expectedCount: 250,
    processor: 'pdf_ocr'
  }
]

// === –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ò–ù–î–ï–ö–°–ê–¢–û–†–ê ===
class DocumentIndexer {
  private stats = {
    processed: 0,
    skipped: 0,
    errors: 0,
    startTime: Date.now()
  }

  constructor(private config: BuildConfig) {}

  async build(): Promise<void> {
    console.log('üî• KnowledgeGas AI - Index Builder')
    console.log('===================================')
    
    try {
      await this.setupDirectories()
      await this.validateInput()
      
      const documents = await this.scanDocuments()
      console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏`)
      
      await this.processDocuments(documents)
      await this.buildSearchIndex()
      await this.generateStats()
      
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:', error)
      process.exit(1)
    }
  }

  private async setupDirectories(): Promise<void> {
    const dirs = [this.config.outputDir, path.join(this.config.outputDir, 'embeddings')]
    
    for (const dir of dirs) {
      await fs.mkdir(dir, { recursive: true })
    }
    
    console.log('üìÅ –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã')
  }

  private async validateInput(): Promise<void> {
    try {
      await fs.access(this.config.inputDir)
      console.log(`üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.config.inputDir}`)
    } catch {
      throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${this.config.inputDir}`)
    }
  }

  private async scanDocuments(): Promise<Array<{ path: string; type: DocumentType }>> {
    const documents: Array<{ path: string; type: DocumentType }> = []
    
    for (const docType of DOCUMENT_TYPES) {
      console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${docType.name}`)
      
      const found = await this.findFilesByPatterns(docType.patterns)
      
      for (const filePath of found) {
        documents.push({ path: filePath, type: docType })
      }
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${found.length} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${docType.expectedCount})`)
      
      if (found.length < docType.expectedCount * 0.5) {
        console.warn(`‚ö†Ô∏è  –ú–∞–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ "${docType.name}": ${found.length} < ${docType.expectedCount}`)
      }
    }
    
    return documents
  }

  private async findFilesByPatterns(patterns: string[]): Promise<string[]> {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å glob –∏–ª–∏ fast-glob
    const files: string[] = []
    
    async function scanDir(dirPath: string): Promise<void> {
      try {
        const entries = await fs.readdir(dirPath, { withFileTypes: true })
        
        for (const entry of entries) {
          const fullPath = path.join(dirPath, entry.name)
          
          if (entry.isDirectory()) {
            await scanDir(fullPath)
          } else {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            const ext = path.extname(entry.name).toLowerCase()
            if (['.pdf', '.dwg', '.md', '.docx'].includes(ext)) {
              files.push(fullPath)
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    }
    
    await scanDir(this.config.inputDir)
    return files
  }

  private async processDocuments(documents: Array<{ path: string; type: DocumentType }>): Promise<void> {
    console.log('‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...')
    
    const batches = this.chunkArray(documents, this.config.processing.batchSize)
    
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i]
      console.log(`üì¶ –ë–∞—Ç—á ${i + 1}/${batches.length} (${batch.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`)
      
      await Promise.allSettled(
        batch.map(doc => this.processDocument(doc))
      )
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      const progress = Math.round(((i + 1) / batches.length) * 100)
      console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`)
    }
  }

  private async processDocument({ path: filePath, type }: { path: string; type: DocumentType }): Promise<void> {
    try {
      const stats = await fs.stat(filePath)
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      if (stats.size > this.config.processing.maxFileSize * 1024 * 1024) {
        this.stats.skipped++
        return
      }
      
      const content = await this.extractContent(filePath, type.processor)
      const embedding = await this.generateEmbedding(content.text)
      
      const document = {
        id: this.generateDocumentId(filePath),
        title: content.title || path.basename(filePath),
        content: content.text,
        type: type.id,
        tags: content.tags || [],
        version: content.version || '1.0',
        status: content.status || '–î–µ–π—Å—Ç–≤—É—é—â–∏–π',
        updated: stats.mtime,
        file_path: filePath,
        file_size: stats.size,
        checksum: await this.calculateChecksum(filePath),
        embedding
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Elastic
      const outputPath = path.join(
        this.config.outputDir, 
        'documents', 
        `${document.id}.json`
      )
      
      await fs.mkdir(path.dirname(outputPath), { recursive: true })
      await fs.writeFile(outputPath, JSON.stringify(document, null, 2))
      
      this.stats.processed++
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error)
      this.stats.errors++
    }
  }

  private async extractContent(filePath: string, processor: string): Promise<{
    title?: string
    text: string
    tags?: string[]
    version?: string
    status?: string
  }> {
    const ext = path.extname(filePath).toLowerCase()
    
    switch (processor) {
      case 'pdf_ocr':
        return await this.extractPdfWithOcr(filePath)
      
      case 'pdf_text':
        return await this.extractPdfText(filePath)
      
      case 'dwg_to_pdf':
        return await this.extractDwgContent(filePath)
      
      case 'markdown':
        return await this.extractMarkdownContent(filePath)
      
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${processor}`)
    }
  }

  private async extractPdfWithOcr(filePath: string): Promise<any> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tesseract –∏–ª–∏ Azure OCR
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ
    return {
      title: path.basename(filePath, path.extname(filePath)),
      text: `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ ${filePath} (OCR)`,
      tags: ['pdf', 'ocr'],
      version: '1.0',
      status: '–î–µ–π—Å—Ç–≤—É—é—â–∏–π'
    }
  }

  private async extractPdfText(filePath: string): Promise<any> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pdf2pic –∏–ª–∏ pdf-parse
    return {
      title: path.basename(filePath, path.extname(filePath)),
      text: `–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ ${filePath}`,
      tags: ['pdf', 'text']
    }
  }

  private async extractDwgContent(filePath: string): Promise<any> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AutoCAD API –∏–ª–∏ Open Design SDK
    return {
      title: path.basename(filePath, path.extname(filePath)),
      text: `–û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–∞ ${filePath}`,
      tags: ['dwg', 'drawing']
    }
  }

  private async extractMarkdownContent(filePath: string): Promise<any> {
    const content = await fs.readFile(filePath, 'utf-8')
    const lines = content.split('\n')
    const title = lines.find(line => line.startsWith('# '))?.slice(2) || 
                  path.basename(filePath, '.md')
    
    return {
      title,
      text: content,
      tags: ['markdown', 'incident']
    }
  }

  private async generateEmbedding(text: string): Promise<number[]> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å sentence-transformers (miniLM-v3)
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∏–∑ 384 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    return Array.from({ length: 384 }, () => Math.random() - 0.5)
  }

  private generateDocumentId(filePath: string): string {
    return createHash('md5').update(filePath).digest('hex').slice(0, 16)
  }

  private async calculateChecksum(filePath: string): Promise<string> {
    const content = await fs.readFile(filePath)
    return createHash('md5').update(content).digest('hex')
  }

  private async buildSearchIndex(): Promise<void> {
    console.log('üîç –°–±–æ—Ä–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...')
    
    // TODO: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Elasticsearch
    // –ü–æ–∫–∞ —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π JSON-–∏–Ω–¥–µ–∫—Å
    const documentsDir = path.join(this.config.outputDir, 'documents')
    const files = await fs.readdir(documentsDir)
    
    const index = {
      version: '1.0',
      created: new Date().toISOString(),
      documents_count: files.length,
      mappings: this.config.elastic.mappings
    }
    
    const indexPath = path.join(this.config.outputDir, 'index.json')
    await fs.writeFile(indexPath, JSON.stringify(index, null, 2))
    
    console.log(`üìá –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: ${indexPath}`)
  }

  private async generateStats(): Promise<void> {
    const duration = Date.now() - this.stats.startTime
    
    const stats = {
      ...this.stats,
      duration_ms: duration,
      duration_human: this.formatDuration(duration),
      documents_per_second: Math.round(this.stats.processed / (duration / 1000))
    }
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:')
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed}`)
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}`)
    console.log(`   –û—à–∏–±–æ–∫: ${stats.errors}`)
    console.log(`   –í—Ä–µ–º—è: ${stats.duration_human}`)
    console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${stats.documents_per_second} –¥–æ–∫/—Å–µ–∫`)
    
    const statsPath = path.join(this.config.outputDir, 'stats.json')
    await fs.writeFile(statsPath, JSON.stringify(stats, null, 2))
  }

  private formatDuration(ms: number): string {
    const minutes = Math.floor(ms / 60000)
    const seconds = Math.floor((ms % 60000) / 1000)
    return `${minutes}–º ${seconds}—Å`
  }

  private chunkArray<T>(array: T[], size: number): T[][] {
    const chunks: T[][] = []
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size))
    }
    return chunks
  }
}

// === –¢–û–ß–ö–ê –í–•–û–î–ê ===
async function main() {
  const indexer = new DocumentIndexer(CONFIG)
  await indexer.build()
}

if (require.main === module) {
  main().catch(console.error)
}

export default DocumentIndexer 